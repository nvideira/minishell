https://www.geeksforgeeks.org/making-linux-shell-c/

sudo apt-get install libreadline-dev

https://github.com/kube/42homebrew

brew install readline

ctrl-C displays a new prompt on a new line.
ctrl-D exits the shell.
ctrl-\ does nothing.
echo with option -n
cd with only a relative or absolute path
pwd with no options
export with no options
unset with no options
env with no options or arguments
exit with no options

//Allowed Functions

readline
rl_clear_history
rl_on_new_line
rl_replace_line
rl_redisplay
add_history
printf
malloc
free
write
access
open
read
close
fork
wait
waitpid
wait3
wait4
signal
sigaction
sigemptyset
sigaddset
kill
exit
getcwd
chdir
stat
lstat
fstat
unlink
execve
dup
dup2
pipe
opendir
readdir
closedir
strerror
perror
isatty
ttyname
ttyslot
ioctl
getenv
tcsetattr
tcgetattr
tgetent
tgetflag
tgetnum
tgetstr
tgoto
tputs

//Definition
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////READLINE: Get a line from a user with editing

#include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>

char *readline (const char *prompt);

Description:
readline will read a line from the terminal and return it, using
prompt as a prompt.  If prompt is NULL or the empty string, no
prompt is issued.  The line returned is allocated with malloc(3);
the caller must free it when finished.  The line returned has the
final newline removed, so only the text of the line remains.

Readline offers editing capabilities while the user is entering
the line.  By default, the line editing commands are similar to
those of emacs.  A vi-style line editing interface is also
available.

Return Value:
readline returns the text of the line read.  A blank line returns
the empty string.  If EOF is encountered while reading a line,
and the line is empty, NULL is returned.  If an EOF is read with
a non-empty line, it is treated as a newline.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////RL_CLEAR_HISTORY:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////RL_ON_NEW_LINE:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////RL_REPLACE_LINE:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////RL_REDISPLAY:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////ADD_HISTORY:

void add_history (const char *string)

Description:
Place string at the end of the history list.  The associated data
field (if any) is set to NULL.  If the maximum number of history
entries has been set using stifle_history(), and the new number
of history entries would exceed that maximum, the oldest history
entry is removed.

Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
PRINTF
MALLOC
FREE
WRITE
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////ACCESS:

#include <unistd.h>

int access(const char *pathname, int mode);

Description:
access() checks whether the calling process can access the file
pathname.  If pathname is a symbolic link, it is dereferenced.

The mode specifies the accessibility check(s) to be performed,
and is either the value F_OK, or a mask consisting of the bitwise
OR of one or more of R_OK, W_OK, and X_OK.  F_OK tests for the
existence of the file.  R_OK, W_OK, and X_OK test whether the
file exists and grants read, write, and execute permissions,
respectively.

The check is done using the calling process's real UID and GID,
rather than the effective IDs as is done when actually attempting
an operation (e.g., open(2)) on the file.  Similarly, for the
root user, the check uses the set of permitted capabilities
rather than the set of effective capabilities; and for non-root
users, the check uses an empty set of capabilities.

This allows set-user-ID programs and capability-endowed programs
to easily determine the invoking user's authority.  In other
words, access() does not answer the "can I read/write/execute
this file?" question.  It answers a slightly different question:
"(assuming I'm a setuid binary) can the user who invoked me
read/write/execute this file?", which gives set-user-ID programs
the possibility to prevent malicious users from causing them to
read files which users shouldn't be able to read.

If the calling process is privileged (i.e., its real UID is
zero), then an X_OK check is successful for a regular file if
execute permission is enabled for any of the file owner, group,
or other.

Return Value:
On success (all requested permissions granted, or mode is F_OK
and the file exists), zero is returned.  On error (at least one
bit in mode asked for a permission that is denied, or mode is
F_OK and the file does not exist, or some other error occurred),
-1 is returned, and errno is set to indicate the error.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////OPEN:

#include <fcntl.h>

int open(const char *pathname, int flags);

Description:
The open() system call opens the file specified by pathname.  If
the specified file does not exist, it may optionally (if O_CREAT
is specified in flags) be created by open().

The return value of open() is a file descriptor, a small,
nonnegative integer that is an index to an entry in the process's
table of open file descriptors.  The file descriptor is used in
subsequent system calls (read(2), write(2), lseek(2), fcntl(2),
etc.) to refer to the open file.  The file descriptor returned by
a successful call will be the lowest-numbered file descriptor not
currently open for the process.

By default, the new file descriptor is set to remain open across
an execve(2) (i.e., the FD_CLOEXEC file descriptor flag described
in fcntl(2) is initially disabled); the O_CLOEXEC flag, described
below, can be used to change this default.  The file offset is
set to the beginning of the file (see lseek(2)).

A call to open() creates a new open file description, an entry in
the system-wide table of open files.  The open file description
records the file offset and the file status flags (see below).  A
file descriptor is a reference to an open file description; this
reference is unaffected if pathname is subsequently removed or
modified to refer to a different file.  For further details on
open file descriptions, see NOTES.

The argument flags must include one of the following access
modes: O_RDONLY, O_WRONLY, or O_RDWR.  These request opening the
file read-only, write-only, or read/write, respectively.

In addition, zero or more file creation flags and file status
flags can be bitwise-or'd in flags.  The file creation flags are
O_CLOEXEC, O_CREAT, O_DIRECTORY, O_EXCL, O_NOCTTY, O_NOFOLLOW,
O_TMPFILE, and O_TRUNC.  The file status flags are all of the
remaining flags listed below.  The distinction between these two
groups of flags is that the file creation flags affect the
semantics of the open operation itself, while the file status
flags affect the semantics of subsequent I/O operations.  The
file status flags can be retrieved and (in some cases) modified;
see fcntl(2) for details.

Return Value:
On success, open(), openat(), and creat() return the new file
descriptor (a nonnegative integer).  On error, -1 is returned and
errno is set to indicate the error.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////READ:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////CLOSE:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////FORK:

#include <unistd.h>

pid_t fork(void);

Description:
fork() creates a new process by duplicating the calling process.
The new process is referred to as the child process.  The calling
process is referred to as the parent process.

The child process and the parent process run in separate memory
spaces.  At the time of fork() both memory spaces have the same
content.  Memory writes, file mappings (mmap(2)), and unmappings
(munmap(2)) performed by one of the processes do not affect the
other.
       
Return Value:
On success, the PID of the child process is returned in the
parent, and 0 is returned in the child.  On failure, -1 is
returned in the parent, no child process is created, and errno is
set to indicate the error.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////WAIT:

#include <sys/wait.h>

pid_t wait(int *wstatus);

Description:
All of these system calls are used to wait for state changes in a
child of the calling process, and obtain information about the
child whose state has changed.  A state change is considered to
be: the child terminated; the child was stopped by a signal; or
the child was resumed by a signal.  In the case of a terminated
child, performing a wait allows the system to release the
resources associated with the child; if a wait is not performed,
then the terminated child remains in a "zombie" state (see NOTES
below).

If a child has already changed state, then these calls return
immediately.  Otherwise, they block until either a child changes
state or a signal handler interrupts the call (assuming that
system calls are not automatically restarted using the SA_RESTART
flag of sigaction(2)).  In the remainder of this page, a child
whose state has changed and which has not yet been waited upon by
one of these system calls is termed waitable.

Return Value:
wait(): on success, returns the process ID of the terminated
child; on failure, -1 is returned.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////WAITPID:

pid_t waitpid(pid_t pid, int *wstatus, int options);

Description:
wait() and waitpid()
The wait() system call suspends execution of the calling thread
until one of its children terminates.  The call wait(&wstatus) is
equivalent to:

    waitpid(-1, &wstatus, 0);

The waitpid() system call suspends execution of the calling
thread until a child specified by pid argument has changed state.
By default, waitpid() waits only for terminated children, but
this behavior is modifiable via the options argument, as
described below.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////WAIT3:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////WAIT4:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////SIGNAL:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////SIGACTION:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////SIGEMPTYSET:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////SIGADDSET:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////KILL:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////EXIT:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////GETCWN:

#include <unistd.h>

char *getcwd(char *buf, size_t size);
char *getwd(char *buf);
char *get_current_dir_name(void);

Description:
These functions return a null-terminated string containing an
absolute pathname that is the current working directory of the
calling process.  The pathname is returned as the function result
and via the argument buf, if present.

The getcwd() function copies an absolute pathname of the current
working directory to the array pointed to by buf, which is of
length size.

If the length of the absolute pathname of the current working
directory, including the terminating null byte, exceeds size
bytes, NULL is returned, and errno is set to ERANGE; an
application should check for this error, and allocate a larger
buffer if necessary.

Return Value:
On success, these functions return a pointer to a string
containing the pathname of the current working directory.  In the
case of getcwd() and getwd() this is the same value as buf.

On failure, these functions return NULL, and errno is set to
indicate the error.  The contents of the array pointed to by buf
are undefined on error.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////CHDIR:

#include <unistd.h>

int chdir(const char *path);
Description:
chdir() changes the current working directory of the calling
process to the directory specified in path.

Return Value:
On success, zero is returned.  On error, -1 is returned, and
errno is set to indicate the error.
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////STAT:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////LSTAT:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////FSTAT:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////UNLINK:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////EXECVE:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////DUP:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////DUP2:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////PIPE:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////OPENDIR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////READDIR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////CLOSEDIR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////STRERROR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////PERROR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////ISATTY:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TTYNAME:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TTYSLOT:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////IOCTL:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////GETENV:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TCSETATTR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TCGETATTR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TGETENT:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TGETFLAG:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TGETNUM:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TGETSTR:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TGOTO:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
////////////////TPUTS:
Description:
Return Value:
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////